diff --git a/booking/models.py b/booking/models.py
index 664976c..c9dd78b 100644
--- a/booking/models.py
+++ b/booking/models.py
@@ -3,6 +3,8 @@
 from django.db import models
 from car.models import Car
 from django.contrib.auth.models import User
+from django.db.models.signals import post_save
+from django.dispatch import receiver
 
 # Create your models here.
 
@@ -20,5 +22,7 @@ class Booking(models.Model):
 	def __str__(self):
 		return str(self.id)
 
-
-
+@receiver(post_save, sender=Booking)
+def update_car_disponibility(sender, instance, **kwargs):
+	setattr(instance.car, 'disponibility', 0)
+	instance.car.save(update_fields=['disponibility'])
\ No newline at end of file
diff --git a/booking/templates/booking/base.html b/booking/templates/booking/base.html
index a04cf35..d48a569 100644
--- a/booking/templates/booking/base.html
+++ b/booking/templates/booking/base.html
@@ -1,5 +1,13 @@
 {% load staticfiles %}
 
+{% if messages %}
+<ul class="messages">
+    {% for message in messages %}
+    <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
+    {% endfor %}
+</ul>
+{% endif %}
+
 <!DOCTYPE html>
 <html>
 	<head>
diff --git a/booking/urls.py b/booking/urls.py
index 5a19a89..aeceaaa 100644
--- a/booking/urls.py
+++ b/booking/urls.py
@@ -1,6 +1,7 @@
 from django.conf.urls import url
 from . import views
 from django.contrib.auth import views as auth_views
+from booking.views import NewBooking
 
 from django.contrib.auth.decorators import login_required
 from django.views.generic import TemplateView
@@ -12,7 +13,7 @@ urlpatterns = [
     url(r'^join$', views.join, name='booking_join'),
     url(r'^home$', views.home, name='booking_list'),
 	url(r'^(?P<bookingID>\d+)$', views.booking, name='booking'),
-	url(r'^new$', views.new, name='booking_new'),
+	url(r'^new$', NewBooking.as_view(), name='booking_new'),
 	url(r'^delete/(?P<bookingID>\d+)$', views.delete, name='booking_delete'),
 ]
 
diff --git a/booking/views.py b/booking/views.py
index fa5ac27..4dfd173 100644
--- a/booking/views.py
+++ b/booking/views.py
@@ -1,9 +1,11 @@
+from django.utils.translation import ugettext as _
 from django.shortcuts import render, redirect
 from django.http import HttpResponse, Http404, HttpResponseForbidden
 from django.utils import timezone
 from django.core.exceptions import ObjectDoesNotExist
 from django.contrib.auth.models import User
-
+from django.contrib import messages
+from django.views import View
 from .forms import BookingForm, JoinForm
 from .models import Booking
 from car.models import Car
@@ -81,23 +83,32 @@ def booking(request, bookingID):
 	else:
 		return HttpResponseForbidden()
 
-def new(request):
-	form = BookingForm(request.POST or None)
-	if form.is_valid():
-		booking = Booking()
-		booking.user = request.user
-		booking.reservation_date = datetime.now()
-		booking.start_address = form.cleaned_data['start_address']
-		booking.dest_address = form.cleaned_data['dest_address']
-		booking.duration = get_duration(booking.start_address, booking.dest_address)
-		booking.state = True
-		if get_cars():
-			booking.car = get_cars()[0]
-			set_car_disponibility(get_cars()[0].id, False)
-		booking.save()
-		return redirect('/bookings/' + str(booking))
-
-	return render(request, 'booking/new.html', locals())
+class NewBooking(View):
+	def get(self, request, *args, **kwargs):
+		if not Car.available.count():
+			messages.error(request, _("Error : no more car are available"))
+			return redirect('/bookings/home')
+
+		form = BookingForm()
+		return render(request, 'booking/new.html', {'form' : form})
+	def post(self, request, *args, **kwargs):
+		form = BookingForm(request.POST)
+		if form.is_valid():
+			if not Car.available.count():
+				messages.error(request, _("Error : no more car are available"))
+				return render(request, 'booking/new.html', {'form': form})
+
+			start_address = form.cleaned_data['start_address']
+			dest_address = form.cleaned_data['dest_address']
+			try:
+				duration = get_duration(start_address, dest_address)
+			except:
+				messages.error(request, _("Error : addresses could be wrong"))
+				return render(request, 'booking/new.html', {'form': form})
+
+			booking = Booking.objects.create(user = request.user, reservation_date = datetime.now(), start_address = start_address, dest_address = dest_address, duration = duration, state = True, car = Car.available.first())
+			return redirect('/bookings/' + str(booking))
+		return render(request, 'booking/new.html', {'form' : form})
 
 def delete(request, bookingID):
 	delete_booking(bookingID)
diff --git a/car/models.py b/car/models.py
index 0ed0e83..da04c5a 100644
--- a/car/models.py
+++ b/car/models.py
@@ -2,8 +2,14 @@ from django.db import models
 
 # Create your models here.
 
+class CarManager(models.Manager):
+	def get_queryset(self):
+		return super(CarManager, self).get_queryset().filter(disponibility = True)
+
 class Car(models.Model):
 	disponibility = models.BooleanField()
+	objects = models.Manager()
+	available = CarManager()
 
 	def __str__(self):
 		return str(self.id)
\ No newline at end of file
diff --git a/consignes.md b/consignes.md
index c05f178..355d674 100644
--- a/consignes.md
+++ b/consignes.md
@@ -6,7 +6,7 @@ Ce n'est bien entendu pas suffisant, et la nuit même, vous cauchemardez qu'un b
 
 # Exercice :
 
-- Pour vous faire gagner du temps, et parce que vous n'arriverez pas sur un projet vierge, nous vous fournissons un système de réservation très simplifié permettant à un client de réserver une voiture pour effectuer un trajet.
+- Pour vous faire gagner du temps, et parce que vous n'arriverez pas sur un projet vierge, nous vous fournissons un système de réservation très simplifié permet95tant à un client de réserver une voiture pour effectuer un trajet.
 - Le code est de mauvaise qualité, et vous avez carte blanche pour l'améliorer et le rendre 'production ready'. Ce refactoring est le coeur de l'exercice.
 - Listez les présupposés dans le code qui rendent impossible de s'en servir réellement. Par exemple, il n'y a pas de système de paiement...
 - Bonus : corrigez ces simplifications ;-)
diff --git a/db.sqlite3 b/db.sqlite3
index 33f9b64..70bc28a 100644
Binary files a/db.sqlite3 and b/db.sqlite3 differ
